############################# Node #############################
# number of nodes in the system
numberOfNodes = 10

# Not Implemented
# CSV formed names may be entered
# if no value is present for nodeName, then numerical values are used
# if names entered are more/less than provided into numberNode property then the program will report an exception
# nodeName =

# CSV stored   
# if numbers of node capacity is LESS the numberNode property then the program will report an exception
# if numbers of node capacity is MORE the numberNode property then ONLY nodes mentioned by the numberNode property will be counted
# if no value is present for nodeCapacity is used for all, then 100
nodeCapacity = 100

# CSV stored delay 
# if numbers of node capacity is LESS the numberNode property then the program will report an exception
# if numbers of node capacity is MORE the numberNode property then ONLY nodes mentioned by the numberNode property will be counted
# if no value is present for nodeDelay, 0 is assumed
nodeDelay = 0

# if no value is present for nodeResidualCapacity, then nodeCapacity value will be used
nodeResidualCapacity =

############################# Link #############################

# CSV stored capacity
# use - to separate nodes within a connection
# links represent a directed connection between 2 nodes, if the node listed does not match an existing node an exception should be presented 
# if no value is present for linkCapacity is used, then no links will be made, a warning message should be presented
#linkConnections = 1-2,2-1,3-1,1-3,9-7,4-8,2-4,4-2,8-9
linkConnections = 1-2,2-1,1-4,1-5,2-4,2-3,3-5,4-5,5-4,4-2,5-1,4-1

# CSV stored capacity 
# if numbers of node capacity is LESS the numberNode property then the program will report an exception
# if numbers of node capacity is MORE the numberNode property then ONLY nodes mentioned by the numberNode property will be counted
# if no value is present for linkCapacity is used, then 100
linkCapacity = 

# if no value is present for linkDelay, 0 is assumed
linkDelay = 

# if no value is present for linkResidualCapacity, then linkCapacity value will be used
linkResidualCapacity =

############################# Demand/Flow ########################
# Requested Demands 
# Semicolon separated demands in the form of {source, destination: magnitude # demandID} e.g. 3,4:50
requestedDemands = 4,1|50|1;3,4|10|22;3,4|40|21;3,4|40|4;

# Current Flows 
# Semicolon separated flows in the form of {source-node1-node2-noden-destination:magnitude#demandID} e.g. 4-2-1:10
currentFlows = 4-2-1|30|1;3-1-2-4|10|22;3-1-2-4|40|21

# what happens if a demand has no flows ... then take that flow as arrivedNotSatisfied state and operate on it findAvailableRoutes
# what happens if a demand has not been fulfilled and resources exist
#	run findAvailableRoutes to get it operated
# what happens when a flow has a magnitude that exceeds its associated demand

# Operations order: load requestedDemands, followed by currentFlows, check history of expired flows
#	based on expired flows return to finding available routes for remaining demand in the order they
# 	are supplied 

# Check! Update the status when a demand has been partially/completely satisfied
# Check! Flow rejection when node's resources are depleted
# check! What happens if a flow is entered into currentFlows but there is no matching demand ... throw an exception
# check! What happen if a flow is entered in correctly ... system exit and user is informed to check their config

# need a way to attribute each flow to their demand 
# For each requested demand loop through the "current flows" and associate matching demand ID
# assuming ordering doesn't matter ... 

# Expired Flows
# Expired Flows can assist in discovering what flows need to be discovered for existing demands
# Expired Flows should be in the same format as currentFlows
# Semicolon separated flows in the form of {source-node1-node2-noden-destination:magnitude#demandID} e.g. 4-2-1:10
expiredFlows = 



